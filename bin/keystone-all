#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

import greenlet
import logging
import os
import sys

# If ../keystone/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
possible_topdir = os.path.normpath(os.path.join(os.path.abspath(__file__),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(possible_topdir,
                               'keystone',
                               '__init__.py')):
    sys.path.insert(0, possible_topdir)

from keystone import config
from keystone.common import wsgi
from keystone.openstack.common import pastedeploy


def create_server(paste_config_file, name, host, port, conf):
    app = pastedeploy.paste_deploy_app(paste_config_file, name, conf)
    return wsgi.Server(app, host=host, port=port)


def serve(*servers):
    for server in servers:
        logging.debug("starting server %s on port %s",
                      server.application,
                      server.port)
        server.start()

    for server in servers:
        try:
            server.wait()
        except greenlet.GreenletExit:
            pass


if __name__ == '__main__':
    dev_conf = os.path.join(possible_topdir,
                            'etc',
                            'keystone.conf')
    config_files = None
    if os.path.exists(dev_conf):
        config_files = [dev_conf]

    conf = config.KeystoneConfigOpts(default_config_files=config_files)
    conf()

    config.setup_logging(conf)

    # Log the options used when starting if we're in debug mode...
    if conf.debug:
        conf.log_opt_values(logging.getLogger(conf.prog), logging.DEBUG)

    if not conf.config_file:
        print "No config files could be found."
        conf.print_help()
        sys.exit(1)

    wsgi.register_opts(conf)

    servers = []
    servers.append(create_server(conf.config_file[0],
                                 'admin',
                                 conf.bind_host,
                                 conf.admin_port,
                                 conf))
    servers.append(create_server(conf.config_file[0],
                                 'main',
                                 conf.bind_host,
                                 conf.public_port,
                                 conf))
    serve(*servers)
